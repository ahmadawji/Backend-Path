CREATE TABLE
  "users" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "username" VARCHAR UNIQUE NOT NULL,
    "email" VARCHAR UNIQUE NOT NULL,
    "created_at" TIMESTAMP DEFAULT (CURRENT_TIMESTAMP)
  );

CREATE TABLE
  "accounts" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "name" VARCHAR NOT NULL,
    "description" TEXT,
    "created_at" TIMESTAMP DEFAULT (CURRENT_TIMESTAMP),
    "budget" FLOAT NOT NULL DEFAULT 0,
    "user_id" INTEGER
  );

CREATE TABLE
  "deposit_withdraw" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "value" FLOAT NOT NULL DEFAULT 0,
    "initialized_at" TIMESTAMP DEFAULT (CURRENT_TIMESTAMP),
    "action_type" CHAR(1),
    "category_id" INTEGER,
    "account_id" INTEGER
  );

CREATE TABLE
  "categories" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "title" VARCHAR NOT NULL,
    "description" TEXT,
    "created_at" TIMESTAMP DEFAULT (CURRENT_TIMESTAMP)
  );

CREATE TABLE
  "transfer" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "value" FLOAT NOT NULL DEFAULT 0,
    "sender_account" INTEGER NOT NULL,
    "recipient_account" INTEGER NOT NULL
  );

COMMENT ON COLUMN "categories"."description" IS 'Description of the category';

ALTER TABLE "transfer"
ADD FOREIGN KEY ("sender_account") REFERENCES "accounts" ("id");

ALTER TABLE "transfer"
ADD FOREIGN KEY ("recipient_account") REFERENCES "accounts" ("id");

ALTER TABLE "accounts"
ADD FOREIGN KEY ("user_id") REFERENCES "users" ("id");

ALTER TABLE "deposit_withdraw"
ADD FOREIGN KEY ("category_id") REFERENCES "categories" ("id");

ALTER TABLE "deposit_withdraw"
ADD FOREIGN KEY ("account_id") REFERENCES "accounts" ("id");

ALTER TABLE deposit_withdraw
ADD CONSTRAINT check_negative_value CHECK (VALUE>=0);

ALTER TABLE transfer
ADD CONSTRAINT check_negative_value CHECK (VALUE>=0);

ALTER TABLE accounts
ADD CONSTRAINT check_negative_value CHECK (budget>=0);

-- Trigger function to handle deposit and withdrawal on the deposit_withdrawal table.
CREATE OR
REPLACE FUNCTION handle_deposit_withdrawal () RETURNS TRIGGER AS $$
BEGIN
    IF (SELECT budget FROM accounts WHERE id = NEW.account_id) < NEW.value AND NEW.action_type = 'W' THEN
            RAISE EXCEPTION 'Insufficient funds in sender account.';
        ELSE
            IF NEW.action_type = 'W' THEN
            -- Handle withdrawal
            UPDATE accounts
            SET budget = budget - NEW.value
            WHERE id = NEW.account_id;

            ELSIF NEW.action_type = 'D' THEN
            -- Handle deposit
            UPDATE accounts
            SET budget = budget + NEW.value
            WHERE id = NEW.account_id;

            ELSE
            -- Prevent invalid action types
            RAISE EXCEPTION 'Invalid action_type: %. It must be either W (withdrawal) or D (deposit).', NEW.action_type;
            END IF;
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger function to transfer budget value from one account to another
CREATE OR
REPLACE FUNCTION handle_transfer () RETURNS TRIGGER AS $$
BEGIN
    IF NEW.sender_account = NEW.recipient_account THEN
        RAISE EXCEPTION 'Invalid transfer. Sender account cannot transfer to itself.';
    ELSE
        -- Ensure sender has sufficient budget
        IF (SELECT budget FROM accounts WHERE id = NEW.sender_account) < NEW.value THEN
            RAISE EXCEPTION 'Insufficient funds in sender account.';
        ELSE
            -- Subtract from sender's budget
            UPDATE accounts
            SET budget = budget - NEW.value
            WHERE id = NEW.sender_account;

            -- Add to recipient's budget
            UPDATE accounts
            SET budget = budget + NEW.value
            WHERE id = NEW.recipient_account;
        END IF;
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- deposit_withdrawal trigger
CREATE TRIGGER after_insert_deposit_withdrawal
AFTER INSERT ON deposit_withdraw FOR EACH ROW
EXECUTE FUNCTION handle_deposit_withdrawal ();

-- transfer trigger
CREATE TRIGGER after_insert_transfer
AFTER INSERT ON transfer FOR EACH ROW
EXECUTE FUNCTION handle_transfer ();