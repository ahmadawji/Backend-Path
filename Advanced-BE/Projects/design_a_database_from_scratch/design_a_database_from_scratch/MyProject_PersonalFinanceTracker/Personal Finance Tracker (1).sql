CREATE TABLE "users" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "username" varchar UNIQUE NOT NULL,
  "email" varchar UNIQUE NOT NULL,
  "created_at" timestamp DEFAULT (current_timestamp)
);

CREATE TABLE "accounts" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" varchar NOT NULL,
  "description" text,
  "created_at" timestamp DEFAULT (current_timestamp),
  "budget" float NOT NULL DEFAULT 0,
  "user_id" integer
);

CREATE TABLE "deposit_withdraw" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "value" float NOT NULL DEFAULT 0,
  "initialized_at" timestamp DEFAULT (current_timestamp),
  "action_type" CHAR(1),
  "category_id" integer,
  "account_id" integer
);

CREATE TABLE "categories" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "title" varchar NOT NULL,
  "description" text,
  "created_at" timestamp DEFAULT (current_timestamp)
);

CREATE TABLE "transfer" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "value" float NOT NULL DEFAULT 0,
  "sender_account" integer NOT NULL,
  "recipient_account" integer NOT NULL
);

COMMENT ON COLUMN "categories"."description" IS 'Description of the category';

ALTER TABLE "transfer" ADD FOREIGN KEY ("sender_account") REFERENCES "accounts" ("id");

ALTER TABLE "transfer" ADD FOREIGN KEY ("recipient_account") REFERENCES "accounts" ("id");

ALTER TABLE "accounts" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("id");

ALTER TABLE "deposit_withdraw" ADD FOREIGN KEY ("category_id") REFERENCES "categories" ("id");

ALTER TABLE "deposit_withdraw" ADD FOREIGN KEY ("account_id") REFERENCES "accounts" ("id");

ALTER TABLE deposit_withdraw ADD CONSTRAINT check_negative_value CHECK (value >=0);

ALTER TABLE transfer ADD CONSTRAINT check_negative_value CHECK (value >=0);

ALTER TABLE accounts ADD CONSTRAINT check_negative_value CHECK (budget >=0);


-- Trigger function to handle deposit and withdrawal on the deposit_withdrawal table.

CREATE OR REPLACE FUNCTION handle_deposit_withdrawal()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.action_type = 'W' THEN
        -- Handle withdrawal
        UPDATE accounts
        SET budget = budget - NEW.value
        WHERE id = NEW.account_id;
    ELSIF NEW.action_type = 'D' THEN
        -- Handle deposit
        UPDATE accounts
        SET budget = budget + NEW.value
        WHERE id = NEW.account_id;
    ELSE
        -- Prevent invalid action types
        RAISE EXCEPTION 'Invalid action_type: %. It must be either W (withdrawal) or D (deposit).', NEW.action_type;
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- deposit_withdrawal trigger
CREATE TRIGGER after_insert_deposit_withdrawal
AFTER INSERT ON deposit_withdraw
FOR EACH ROW
EXECUTE FUNCTION handle_deposit_withdrawal();